name: Deploy to IIS and Restart Website

on:
  push:
    tags:
      - "v*"  # Trigger only when a tag like v1.0.0 is pushed
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Stop IIS Website (if running)
    - name: Stop IIS Website (if running)
      run: |
        echo "Checking if IIS website CargoWise_Test exists and is running..."
        Import-Module WebAdministration
        if (Test-Path IIS:\Sites\CargoWise_Test) {
          $website = Get-Website -Name "CargoWise_Test"
          if ($website.state -eq "Started") {
            echo "Website CargoWise_Test is running. Stopping it..."
            Stop-Website -Name "CargoWise_Test"
            echo "Website CargoWise_Test stopped successfully."
          } else {
            echo "Website CargoWise_Test exists but is not running. No need to stop."
          }
        } else {
          echo "Website CargoWise_Test does not exist. Skipping stop operation."
        }
      shell: pwsh

    # Step 3: Backup Old Code
    - name: Backup Old Code
      run: |
        $backupDir = "C:\inetpub\wwwroot\CargoWise_Test\BackEnd\Backup"
        $sourceDir = "C:\inetpub\wwwroot\CargoWise_Test\BackEnd"
        if (-Not (Test-Path -Path $backupDir)) {
          echo "Backup directory does not exist. Creating: $backupDir..."
          New-Item -ItemType Directory -Path $backupDir
        }
        echo "Backing up files from $sourceDir to $backupDir..."
        Copy-Item -Path "$sourceDir\*" -Destination $backupDir -Recurse -Exclude "Backup"
        echo "Backup completed successfully."

    # Step 4: Remove Old Code (Exclude Backup Directory)
    - name: Remove Old Code
      run: |
        $sourceDir = "C:\inetpub\wwwroot\CargoWise_Test\BackEnd"
        echo "Removing old files from $sourceDir but keeping $sourceDir\\Backup..."
        Get-ChildItem -Path $sourceDir -Recurse | Where-Object { $_.FullName -notlike "$sourceDir\\Backup*" } | Remove-Item -Recurse -Force
        echo "Old files removed successfully."

    # Step 5: Build the Code
    - name: Build the Code
      run: |
        echo "Building the code..."
        dotnet build --configuration Release
        echo "Build completed successfully."

    # Step 6: Deploy New Code
    - name: Deploy New Code
      run: |
        $buildOutput = ".\bin\Release\net6.0"  # Adjust for your project's output folder
        $targetDir = "C:\inetpub\wwwroot\CargoWise_Test\BackEnd"
        echo "Copying files to $targetDir..."
        Copy-Item -Path "$buildOutput\*" -Destination $targetDir -Recurse
        echo "New code deployed successfully."

    # Step 7: Start IIS Website
    - name: Start IIS Website
      run: |
        echo "Starting IIS website CargoWise_Test..."
        Import-Module WebAdministration
        if (Test-Path IIS:\Sites\CargoWise_Test) {
          Start-Website -Name "CargoWise_Test"
          echo "Website CargoWise_Test started successfully."
        } else {
          echo "Website CargoWise_Test does not exist. Cannot start."
        }
      shell: pwsh
